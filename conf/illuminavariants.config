// Illumina variants workflow specific params

params {

    // Repo to download your artic scripts from
    scriptsRepoURL = 'https://github.com/artic-network/fieldbioinformatics.git'

    // Directory within scriptsRepoURL that contains scripts
    scriptsDir = 'artic'

    // Instead of using the ivar-compatible bed file in the scheme repo, the
    // full path to a previously-created ivar bed file. Must also supply
    // ref.
    bed = false

    // Instead of indexing the reference file in the scheme repo, the prefix
    // of previously-created reference index files. Must also supply bed.
    // (With these defined, none of the scheme* variables will be used.)
    ref = false

    // illumina fastq search path
    illuminaSuffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
    fastq_exts = ['.fastq.gz', '.fq.gz']

    fastqSearchPath = makeFastqSearchPath( params.illuminaSuffixes, params.fastq_exts )
    
    // Use cram input instead of fastq files
    cram = false

    // Allow reads that don't have primer sequence? Ligation prep = false, nextera = true
    allowNoprimer = true

    // Length of illumina reads to keep after primer trimming
    illuminaKeepLen = 20

    // Sliding window quality threshold for keeping reads after primer trimming (illumina)
    illuminaQualThreshold = 20

    // lofreq minimum base quality to call variant (lofreq call: --min-bq)
    lofreqMinBaseQuality = 10

    // lofreq minimum mapQ to call variant (lofreq call: --min-mq)
    lofreqMinMapQuality = 20

    // lofreq minimum coverage to call variant (lofreq call: --min-cov)
    lofreqMinCov = 1

    // Note that changing these parameters currently will cause a problem with removeFilteredVariants due to the way lofreq names the filters
    // coverage threshold below which bases are set to N (make_depth_mask.py: --depth, lofreq filter: --cov-min)
    minDepthThreshold = 20

    // lofreq minimum frequency threshold to call variant (ivar variants: -t )
    lofreqMinFreqThreshold = 0.25

}

def makeFastqSearchPath ( illuminaSuffixes, fastq_exts ) {
    //if (! params.directory ) {
    //    println("Please supply a directory containing fastqs with --directory")
    //    System.exit(1)
    //}

    if ( params.directory ) {
      def fastq_searchpath = []
      for (item in illuminaSuffixes){
          for(thing in fastq_exts){
              fastq_searchpath.add(params.directory.toString() + '/**' + item.toString() + thing.toString())
          }
      }
      return fastq_searchpath
    }
}