// Global default params, used in configs
params {

  // Workflow flags
  outdir = './results'

  // Boilerplate options
  help = false
  tracedir = "${params.outdir}/pipeline_info"

  // cache option makes it a bit easier to set conda or singularity cacheDir
  cache = ''
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


if ( params.medaka || params.nanopolish ){
    includeConfig 'conf/nanopore.config'
}

if ( params.illumina ){
    includeConfig 'conf/illumina.config'
}


profiles {
  conda {
     if ( params.medaka || params.nanopolish ) {
       process.conda = "$baseDir/environments/nanopore/environment.yml"

     } else if (params.illumina) {
       process.conda = "$baseDir/environments/illumina/environment.yml"
     }
     if (params.cache){
       conda.cacheDir = params.cache
     }
     includeConfig 'conf/conda.config'
  }
  docker {
    docker.enabled = true
    fixOwnership = true
    runOptions = "-u \$(id -u):\$(id -g)"
<<<<<<< Updated upstream
=======
    if ( params.medaka || params.nanopolish ){
      process {
        container="genomicmedicinesweden/gms-artic-nanopore:latest"
      }
    }
    else {
      process {
        container="jd21/gms-artic-illumina:220725"
      }
    }
>>>>>>> Stashed changes
  }
  singularity {
    singularity.enabled = true 
    singularity.autoMounts = true

    if ( params.medaka || params.nanopolish ){
          process {
        withName:articDownloadScheme {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:articGuppyPlex {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:articMinIONMedaka {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:articMinIONNanopolish {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:articRemoveUnmappedReads {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:makeQCCSV {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:writeQCSummaryCSV {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:collateSamples {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:pangolinTyping {
          container="docker://genomicmedicinesweden/gms-artic-pangolin:latest"
        }
        withName:nextclade {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:getVariantDefinitions {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:typeVariants {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:bamToCram {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
        withName:makeReport {
          container="docker://genomicmedicinesweden/gms-artic-nanopore:latest"
        }
<<<<<<< Updated upstream
<<<<<<< Updated upstream
=======
=======
>>>>>>> Stashed changes
        withName:fastqcNanopore {
          container="docker://jd21/gms-artic-nanopore:220726-2"
       }
        withName:multiqcNanopore {
          container="docker://jd21/gms-artic-nanopore:220726-2"
       }
        withName:pycoqc {
          container="docker://jd21/pycoqc:latest"
       }
        withName:versions {
          container="docker://jd21/gms-artic-nanopore:220726-2"
       }
       withName:pangoversions {
            container = "docker://genomicmedicinesweden/gms-artic-pangolin:latest"
       }
>>>>>>> Stashed changes
      }
    } else if (params.illumina) {
            process {
          withName:articDownloadScheme {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:indexReference {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:versions {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:pangoversions {
            container = "docker://genomicmedicinesweden/gms-artic-pangolin:latest"
          }
          withName:fastqc {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:readTrimming {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:readMapping {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:flagStat {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:trimPrimerSequences {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:depth {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:callConsensusFreebayes {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:annotationVEP {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:callVariants {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:makeConsensus {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:makeQCCSV {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:writeQCSummaryCSV {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:statsCoverage {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:statsInsert {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:statsAlignment {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:multiqc {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:collateSamples {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:pangolinTyping {
            container = "docker://genomicmedicinesweden/gms-artic-pangolin:latest"
          }
          withName:nextclade {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:getVariantDefinitions {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
          withName:makeReport {
            container = "docker://jd21/gms-artic-illumina:220725"
          }
        }
    }
    if (params.cache){
      singularity.cacheDir = params.cache
    }
  }
  slurm {
    process.executor = 'slurm'
  }
  lsf {
    process.executor = 'lsf'
  }
  gls {
    process.executor = 'google-lifesciences'
    includeConfig 'conf/gls.config'
  }
  sge {
    process.executor = 'sge'
    process.penv = 'mpi'
  }
}

// COG-UK institutional config
includeConfig 'conf/coguk.config'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = false //requires graphic devices to run on ngp
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  author = 'Matt Bull'
  description = 'Nextflow for running the Artic ncov2019 pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.1.0'
}
